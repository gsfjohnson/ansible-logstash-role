filter {
 
  if "syslog" in [type] and [_SRCIP] != "137.229.0.229" {

    grok {
      patterns_dir => "/opt/logstash/patterns"
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname}  : 1,%{PA_TIMESTAMP},%{INT:pa_sn},%{PA_LOGTYPE:pa_logtype},%{GREEDYDATA:pa_csv}" }
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} \[%{SHIB_SOURCE:shib_logtype}\] %{GREEDYDATA:shib_psv}" }
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} dhcpd\S+\s*%{GREEDYDATA:dhcp_message}" }
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{SYSLOGPROG:program}: %{CEFMESSAGE:cef_message}" }
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{SYSLOGPROG:program}: %{GREEDYDATA:syslog_message}" }
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{SYSLOGLASTMSG:syslog_message}" }
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{GREEDYDATA:syslog_message}" }
    }

    if "_grokparsefailure" not in [tags] {

      syslog_pri { }

      date {
        match => [ "timestamp", "MMM dd HH:mm:ss", "MMM d HH:mm:ss", "MMM dd yyyy HH:mm:ss", "MMM d yyyy HH:mm:ss", "MMM  d HH:mm:ss" ]
        timezone => "America/Anchorage"
      }

      mutate {
        replace => [ "host", "%{syslog_hostname}" ]
        remove_field => [ "timestamp", "syslog_hostname", "syslog_pri" ]
      }

      if [pa_csv] {
        if [pa_logtype] == "TRAFFIC" or [pa_logtype] == "SYSTEM" {
          csv {
            source => "pa_csv"
            # quote_char => ""
            # 1,2015/04/11 07:52:26,000,SYSTEM,general,0,2015/04/11 07:52:26,,general,,0,0,general,informational,scheduled-update: (daily) download job succeeded,244092,0x0
            #columns => [ "FU1", "ReceiveTime", "SerialNumber", "Type", "Subtype", "FU2", "FU3", "vsys", "EventID", "Object", "FU4", "FU5", "Module", "Severity", "Description", "SeqNumber", "ActionFlags" ]
            # general,0,2015/04/11 07:52:26,,general,,0,0,general,informational,scheduled-update: (daily) download job succeeded,244092,0x0
            columns => [ "subtype","FU1","FU2","vsys","eventid","object","FU4","FU5","module","severity","description","sequence","actionflags" ]
          }
          mutate {
            add_tag => [ "paloalto" ]
            replace => [ "message", "%{description}" ]
            replace => [ "pa_logtype", "%{pa_logtype}-%{subtype}" ]
            remove_field => [ "FU1","FU2","FU3","FU4","FU5","vsys","subtype","description","sequence","actionflags","pa_csv" ]
          }
        } else if [pa_logtype] == "THREAT" {
          csv {
            source => "pa_csv"
            # FUTURE_USE, Receive Time, Serial Number, Type, Subtype, FUTURE_USE, Generated Time, Source IP, Destination IP, NAT Source IP, NAT Destination IP, Rule Name, Source User, Destination User, Application, Virtual System, Source Zone, Destination Zone, Ingress Interface, Egress Interface, Log Forwarding Profile, FUTURE_USE, Session ID, Repeat Count, Source Port, Destination Port, NAT Source Port, NAT Destination Port, Flags, Protocol, Action, Miscellaneous, Threat ID, Category, Severity, Direction, Sequence Number, Action Flags, Source Location, Destination Location, FUTURE_USE, Content Type, PCAP_id, Filedigest, Cloud
            columns => [ "threat-contenttype","FU1","generatetime","addrsrc","addrdst","natsrc","natdst","rule","usersrc","userdst","app","vsys","zonesrc","zonedst","ifin","ifout","logaction","timelogged","sessionid","repeatcount","portsrc","portdst","natsrcport","natdstport","flags","ipproto","action","url","threat-contentname","category","severity","direction","seqno","actionflags","countrysrc","countrydst","cpadding","contenttype","FU1","FU2","FU3","FU4","FU5","FU6","FU7","FU8","FU9","FU10","FU11","FU12" ]
          }
          mutate {
            add_tag => [ "paloalto" ]
            remove_field => [ "FU1","FU2","FU3","FU4","FU5","FU6","FU7","FU8","FU9","FU10","FU11","FU12","vsys","subtype","description","sequence","actionflags","pa_csv","message" ]
            remove_field => [ "URL","Threat-ContentName","seqno","cpadding","contenttype","Action" ]
            remove_field => [ "SourceAddress","DestinationAddress","NATSourceIP","NATDestinationIP","Rule","SourceUser","DestinationUser","Application","VirtualSystem","SourceZone","DestinationZone","InboundInterface","OutboundInterface","LogAction","timelogged","sessionid","repeatcount","srcport","dstport","natsrcport","natdstport","flags" ]
          }
          if [direction] == "client-to-server" {
            mutate {
              replace => [ "direction","c2s" ]
            }
          }
          else if [direction] == "server-to-client" {
            mutate {
              replace => [ "direction","s2c" ]
            }
          }
          #if [threat-contenttype] == "url" {
          #  
          #}
        }
      }

      else if [shib_psv] and [shib_logtype] == "Shibboleth-Access:73" {
        csv {
          source => "shib_psv"
          # quote_char => ""
          separator => "|"
          # 20150415T175030Z|172.20.233.49|idp.example.com:443|/profile/SAML2/Redirect/SSO|
          columns => [ "requestTime","clientip","server","request" ]
        }
        mutate {
          add_tag => [ "shibboleth","access" ]
          replace => [ "message", "%{shib_logtype} %{shib_psv}" ]
          remove_field => [ "requestTime","server","shib_psv" ]
        }
      }

      else if [shib_psv] and [shib_logtype] == "Shibboleth-Audit:1028" {
        csv {
          source => "shib_psv"
          # quote_char => ""
          separator => "|"
          # [Shibboleth-Audit:1028] 20150415T174903Z|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST|_142912013833|http://hostname/url|urn:mace:shibboleth:2.0:profiles:saml2:sso|urn:mace:incommon:domain|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST|_9a9e159e0f7c76c6af2393deadbeaf|username-wo-domain|urn:oasis:names:tc:SAML:2.0:ac:classes:Password|eduPersonPrincipalName|username-wo-domain||
          columns => [ "auditEventTime","requestBinding","requestId","relyingPartyId","messageProfileId","assertingPartyId","responseBinding","responseId","principalName","authNMethod","releasedAttributeIDs","nameIdentifier","assertionIDs" ]
        }
        mutate {
          add_tag => [ "shibboleth","audit" ]
          replace => [ "message", "%{shib_logtype} %{shib_psv}" ]
          remove_field => [ "auditEventTime","shib_psv" ]
        }
      }

      else if [dhcp_message] {
        mutate {
          add_tag => [ "dhcp" ]
          replace => [ "message", "%{dhcp_message}" ]
          remove_field => [ "dhcp_message" ]
        }
        grok {
          match => { "message" => "%{WORD:verb} ((for|from) %{IPV4:clientip})?\s*((from %{COMMONMAC:smac}|to %{IPV4:clientip} \(%{COMMONMAC:smac}\))\s*)? via %{USERNAME:interface}(: %{GREEDYDATA:error})?" }

          #                       # DHCPREQUEST for 172.30.240.36 (172.19.0.5) from fc:c2:de:4d:95:94 via 172.30.240.3: ignored (unknown subnet).
          #                       # DHCPREQUEST for 172.30.244.121 from 60:03:08:ef:88:14 (Fredericas-MBP) via eth0
          match => { "message" => "%{WORD:verb} for %{IPV4:clientip}( \(%{IPV4:serverip}\))? from %{COMMONMAC:smac}( \(%{DATA:clientname}\))? via (%{IPV4:relayip}|%{USERNAME:interface})(: %{GREEDYDATA:error})?" }

          #                       # DHCPDISCOVER from 44:2a:60:c8:85:09 (roko) via 172.20.224.2
          match => { "message" => "%{WORD:verb} from %{COMMONMAC:smac} \(%{DATA:clientname}\) via %{IPV4:relayip}" }

          #                       # DHCPACK on 172.20.131.114 to 54:be:f7:89:19:35 (DS1-PRWP-229) via eth0
          #                       # DHCPACK on 172.20.131.114 to 54:be:f7:89:19:35 via eth0
          match => { "message" => "%{WORD:verb} on %{IPV4:clientip} to %{COMMONMAC:smac}( \(%{DATA:clientname}\))? via %{USERNAME:interface}" }

          #                       # DHCPRELEASE of 172.30.247.182 from 40:f4:07:1b:f0:9c (Nintendo 3DS) via eth0 (found)
          #                       # DHCPRELEASE from 50:7e:5d:08:dc:82 specified requested-address.
          match => { "message" => "%{WORD:verb} of %{IPV4:clientip} from %{COMMONMAC:smac}( \(%{DATA:clientname}\))? via %{USERNAME:interface} \(found\)" }
          match => { "message" => "%{WORD:verb} from %{COMMONMAC:smac} specified requested-address." }

          #                       # unable to add reverse map from 98.129.20.172.in-addr.arpa. to RAS-231-D1.elmer.uaf.edu: not authorized
          match => { "message" => "unable to add reverse map from %{USERNAME:reversename} to %{USERNAME:fqdn}(: %{GREEDYDATA:error})?" }

          #                       # Unable to add forward map from STATION53.cns.uaf.edu. to 172.20.153.54: timed out
          match => { "message" => "(Unable to add )?[Ff]orward map from %{USERNAME:fqdn} to %{IPV4:clientip}( FAILED)?(: %{GREEDYDATA:error})?" }

          #                       # added reverse map from 57.139.20.172.in-addr.arpa. to TB326-OIT.ctc.uaf.edu.
          match => { "message" => "(removed|added) reverse map (on|from) %{USERNAME:reversename}( to %{USERNAME:fqdn})?" }

          #                       # removed reverse map on 112.151.20.172.in-addr.arpa
          # match => { "message" => "removed reverse map on %{USERNAME:reversename}" }

          #                       # if Silke459Duck.engr.uaf.edu IN A rrset doesn't exist and Silke459Duck.engr.uaf.edu IN AAAA rrset doesn't exist delete Silke459Duck.engr.uaf.edu IN TXT "319ba1ae9172269607a5ef9b839ebe5d0c": success.
          #                       # if leoxtoby-m1.engr.uaf.edu IN A rrset doesn't exist and leoxtoby-m1.engr.uaf.edu IN AAAA rrset doesn't exist delete leoxtoby-m1.engr.uaf.edu IN TXT "31567b775fb7ad848b077e1649b0beafca": success.
          #                       # if NPI4B80B5.engr.uaf.edu IN TXT "31a8cb05c4634b9ca1ce4f6fd1bf8c0789" rrset exists and NPI4B80B5.engr.uaf.edu IN A 172.20.151.112 rrset exists delete NPI4B80B5.engr.uaf.edu IN A 172.20.151.112: success.
          #                       # if irv-303-m4.iab.uaf.edu IN TXT "312d1d5dc68e8ad85c66e88ee481e4dc99" rrset exists and irv-303-m4.iab.uaf.edu IN A 172.20.128.245 rrset exists delete irv-303-m4.iab.uaf.edu IN A 172.20.128.245: timed out.
          match => { "message" => "if %{USERNAME:fqdn} IN (A|TXT %{QUOTEDSTRING}) rrset( doesn't)? exist(s)? and %{USERNAME} IN A*( %{IPV4})? rrset( doesn't)? exist(s)? delete %{USERNAME} IN (A %{IPV4}|TXT %{QUOTEDSTRING}): %{GREEDYDATA:result}." }

          #                       # ICMP Echo reply while lease 172.30.16.163 valid.
          #                       # ICMP Echo Reply for 172.20.199.231 late or spurious.
          match => { "message" => "ICMP Echo reply while lease %{IPV4:clientip} valid." }
          match => { "message" => "ICMP Echo Reply for %{IPV4:clientip} late or spurious." }

          #                       # Abandoning IP address 172.30.16.163: pinged before offer
          #                       # Abandoning IP address 172.30.56.151: declined.
          match => { "message" => "Abandoning IP address %{IPV4:clientip}: %{GREEDYDATA:error}" }

          #                       # uid lease 172.30.242.114 for client 88:c9:d0:b9:7a:14 is duplicate on 172.30.240.0/21
          match => { "message" => "uid lease %{IPV4:clientip} for client %{COMMONMAC:smac} is duplicate on %{WORD:cidr}" }

          #                       # Dropped DHCPv4 packet with zero-length client-id
          #                       # fqdn tag longer than buffer
          #                       # Wrote 0 ((new dynamic|deleted) host decls|leases) to leases file.
          match => { "message" => "Dropped DHCPv4 packet with zero-length client-id" }
          match => { "message" => "fqdn tag longer than buffer" }
          match => { "message" => "Wrote %{INT} (?:(?:new dynamic|deleted) host decls|leases) to leases file." }
        }
	if [smac] {
          mutate {
            gsub => [ "smac", ":", "" ]
            lowercase => [ "smac" ]
          }
	}
      }

      else if [cef_message] {
        mutate {
          add_tag => [ "RADIUS" ]
          replace => [ "message", "%{cef_message}" ]
          remove_field => [ "cef_message" ]
        }
	grok {
	  match => { "message" => "CEF:%{INT}\|%{WORD}\|%{WORD}\|%{USERNAME}\|%{INT}\|%{RADIUSEVENT:radius_event}\|%{INT}\|%{GREEDYDATA:cef_message}" }
	}
	if "_grokparsefailure" not in [tags] {
	  kv { "source" => "cef_message" }
          mutate {
            remove_field => [ "cef_message" ]
          }
	}
      }

      else if [syslog_message] {
        mutate {
          add_tag => [ "syslog" ]
          replace => [ "message", "%{syslog_message}" ]
          remove_field => [ "syslog_message" ]
        }
      }

    } # if "_grokparsefailure" not in [tags]
  } # if "syslog" in [type] ..
}

