filter {
 
  ##
  ## rsyslog file tails
  ##
  if "syslog" in [type] and "CEF:" not in [message] {
    grok {
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP} %{SYSLOGHOST:syslog_hostname} \*\*\*%{USERNAME:extended_type}: %{GREEDYDATA:extended_message}" }
    }
    if "_grokparsefailure" not in [tags] {
      syslog_pri { }
      mutate {
        replace => [ "host", "%{syslog_hostname}" ]
        replace => [ "type", "%{extended_type}" ]
        replace => [ "message", "%{extended_message}" ]
        remove_field => [ "syslog_hostname", "extended_type", "extended_message", "syslog_pri" ]
      }
    } else {
      mutate {
        remove_tag => [ "_grokparsefailure" ]
      }
    }
  }

  if "apache" in [type] {
    grok {
      # See the following URL for a complete list of named patterns
      # logstash/grok ships with by default:
      # https://github.com/logstash/logstash/tree/master/patterns
      #
      # The grok filter will use the below pattern and on successful match use
      # any captured values as new fields in the event.
      match => { "message" => "%{COMBINEDAPACHELOG_UA:apache_message}" }
      match => { "message" => "%{COMMONAPACHELOG_UA:apache_message}" }
      match => { "message" => "\[%{ERRLOG_TIMESTAMP:timestamp}\] \[%{WORD:class}\] \[%{WORD:originator} %{IP:clientip}\] %{GREEDYDATA:errmsg}%{ERRLOG_REFERER}" }
    }
    if "_grokparsefailure" not in [tags] {
      mutate {
        add_tag => [ "Apache" ]
      }
      if [apache_message] {
        date {
          # Try to pull the timestamp from the 'timestamp' field (parsed above with
          # grok). The apache time format looks like: "18/Aug/2011:05:44:34 -0700"
          match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
          timezone => "America/Anchorage"
        }
        mutate {
          replace => [ "message", '"%{verb} %{request} HTTP/%{httpversion}" %{response}' ]
          remove_field => [ "timestamp" ]
        }
      }
      if [errmsg] {
        date {
          match => [ "timestamp", "ddd MMM dd HH:mm:ss yyyy" ]
          timezone => "America/Anchorage"
        }
        mutate {
          replace => [ "message", "%{errmsg}" ]
          remove_field => [ "timestamp", "errmsg" ]
        }
      }
      #dns {
      #}
    }
  }

  if "roxen" in [type] {
    grok {
      # The grok filter will use the below pattern and on successful match use
      # any captured values as new fields in the event.
      match => { "message" => "%{ROXEN_UA:roxen_message}" }
      match => { "message" => "json:%{GREEDYDATA:json_message}" }
    }
    if "_grokparsefailure" not in [tags] {
      mutate {
        add_tag => [ "Roxen" ]
      }
      if [json_message] {
        json {
          source => "json_message"
        }
        date {
          # Try to pull the timestamp from the 'timestamp' field (parsed above with
          # grok). The apache time format looks like: "18/Aug/2011:05:44:34 -0700"
          match => [ "cert-date", "dd/MMM/yyyy:HH:mm:ss Z" ]
          timezone => "America/Anchorage"
        }
        mutate {
          replace => [ "message", '"%{method} %{request} %{protocol}" %{response}' ]
          remove_field => [ "timestamp" ]
        }
      }
      if [roxen_message] {
        date {
          # Try to pull the timestamp from the 'timestamp' field (parsed above with
          # grok). The apache time format looks like: "18/Aug/2011:05:44:34 -0700"
          match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
          timezone => "America/Anchorage"
        }
        mutate {
          replace => [ "message", '"%{verb} %{request} HTTP/%{httpversion}" %{response}' ]
          remove_field => [ "timestamp","roxen_data" ]
        }
      }
      if [errmsg] {
        date {
          match => [ "timestamp", "ddd MMM dd HH:mm:ss yyyy" ]
          timezone => "America/Anchorage"
        }
        mutate {
          replace => [ "message", "%{errmsg}" ]
          remove_field => [ "timestamp", "errmsg" ]
        }
      }
    }
  }

  if "freeradius-log" in [type] {
    grok {
      match => { "message" => "%{ERRLOG_TIMESTAMP:timestamp} : %{WORD:freeradius_severity}: %{GREEDYDATA:fr_message}" }
    }
    if "_grokparsefailure" not in [tags] {
      mutate {
        replace => [ "program", "radiusd" ]
        add_tag => [ "FreeRADIUS" ]
      }
      if [fr_message] {
        date {
          locale => "en"
          match => [ "timestamp", "EEE MMM dd HH:mm:ss yyyy" ]
          timezone => "America/Anchorage"
        }
        mutate {
          replace => [ "message", "%{fr_message}" ]
        #  remove_field => [ "timestamp", "fr_message" ]
        }
      }
    } # if "_grokparsefailure" not in [tags]
  }

}
